<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Boy&#39;s Blog</title>
  
  <subtitle>心灵随笔</subtitle>
  <link href="http://cctvboy.github.io/atom.xml" rel="self"/>
  
  <link href="http://cctvboy.github.io/"/>
  <updated>2023-11-10T09:01:58.647Z</updated>
  <id>http://cctvboy.github.io/</id>
  
  <author>
    <name>Boy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://cctvboy.github.io/posts/0.html"/>
    <id>http://cctvboy.github.io/posts/0.html</id>
    <published>2023-11-10T09:01:58.647Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Ajax-的XMLHttpRequest的使用"><a href="#Ajax-的XMLHttpRequest的使用" class="headerlink" title="Ajax 的XMLHttpRequest的使用"></a><strong>Ajax 的XMLHttpRequest的使用</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">//2.配置请求方法和请求地址</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;请求方式GET/POST&#x27;</span>,<span class="string">&#x27;URL请求地址&#x27;</span>);</span><br><span class="line"><span class="comment">//3.监听loadend事件，接收响应结果</span></span><br><span class="line">xhr.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadend&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>)<span class="comment">//得到的结果不是JSON格式</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//4.发起请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure><h4 id="Promise的使用"><a href="#Promise的使用" class="headerlink" title="Promise的使用"></a>Promise的使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建Promise对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//2.执行异步任务并传递结果</span></span><br><span class="line"><span class="comment">//a.成功调用：resolve（值）触发then执行</span></span><br><span class="line"><span class="comment">//b.失败调用：reject(值)触发catch执行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//3.接收结果</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//成功返回的值res</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//失败返回的值err</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Ajax-的XMLHttpRequest的使用&quot;&gt;&lt;a href=&quot;#Ajax-的XMLHttpRequest的使用&quot; class=&quot;headerlink&quot; title=&quot;Ajax 的XMLHttpRequest的使用&quot;&gt;&lt;/a&gt;&lt;strong&gt;Ajax 的XML</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cctvboy.github.io/posts/0.html"/>
    <id>http://cctvboy.github.io/posts/0.html</id>
    <published>2023-11-10T09:01:58.647Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h3><p>是一个基于分布式文件存储的数据库，数据结构是类似JSON的BSON格式，</p><div class="table-container"><table><thead><tr><th>MongoDB术语/概念</th><th>解释说明</th></tr></thead><tbody><tr><td>database</td><td>数据库</td></tr><tr><td>collection</td><td>集合</td></tr><tr><td>document</td><td>文档</td></tr><tr><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>索引</td></tr><tr><td>primary key</td><td>主键，MongoDB自动将_id字段设置为主键</td></tr><tr><td>嵌入文档</td><td>MongoDB不支持表连接，通过嵌入文档来替代多表连接</td></tr></tbody></table></div><h3 id="基本常用命令"><a href="#基本常用命令" class="headerlink" title="基本常用命令"></a>基本常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有数据库</span></span><br><span class="line">show databases</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择数据库(如果数据库不存在,不会报错;会隐式创建:当后期该数据库有数据时自动创建)</span></span><br><span class="line">use 数据库名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除数据库(先选中数据库)</span></span><br><span class="line">db.dropDatabase()</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有集合</span></span><br><span class="line">show collections</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建集合(插入数据会隐式创建)</span></span><br><span class="line">db.createCollection(&#x27;集合名&#x27;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除集合</span></span><br><span class="line">db.集合名.drop()</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">插入文档</span></span><br><span class="line">db.集合名.insert(json数据)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除文档</span></span><br><span class="line">db.集合名.remove(条件 [,是否删除一条])</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否删除一条</span></span><br><span class="line">- false删除多条,即全部删除(默认)</span><br><span class="line">- true删除一条</span><br></pre></td></tr></table></figure><h3 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.update(条件, 新数据 [,是否新增, 是否修改多条])</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新数据</span></span><br><span class="line">- 默认是对原数据进行替换</span><br><span class="line">- 若要进行修改,格式为 &#123;修改器:&#123;key:value&#125;&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否新增</span></span><br><span class="line">- 条件匹配不到数据时是否插入: true插入,false不插入(默认)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否修改多条</span></span><br><span class="line">- 条件匹配成功的数据是否都修改: true都修改,false只修改一条(默认)</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>修改器</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td style="text-align:left">$inc</td><td>递增</td></tr><tr><td style="text-align:left">$rename</td><td>重命名列</td></tr><tr><td style="text-align:left">$set</td><td>修改列值</td></tr><tr><td style="text-align:left">$unset</td><td>删除列</td></tr></tbody></table></div><h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.find(条件 [,查询的列])</span><br><span class="line">db.集合名.find(条件 [,查询的列]).pretty()#格式化查看</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">条件</span></span><br><span class="line">- 查询所有数据&#123;&#125;或不写</span><br><span class="line">- 查询指定要求数据&#123;key:value&#125;或&#123;key:&#123;运算符:value&#125;&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询的列(可选参数)</span></span><br><span class="line">- 不写则查询全部列</span><br><span class="line">- &#123;key:1&#125;只显示key列</span><br><span class="line">- &#123;key:0&#125;除了key列都显示</span><br><span class="line">- 注意:_id列都会存在</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th><strong>运算符</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>$gt</td><td>大于</td></tr><tr><td>$gte</td><td>大于等于</td></tr><tr><td>$lt</td><td>小于</td></tr><tr><td>$lte</td><td>小于等于</td></tr><tr><td>$ne</td><td>不等于</td></tr><tr><td>$in</td><td>in</td></tr><tr><td>$nin</td><td>not in</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;MongoDB数据库&quot;&gt;&lt;a href=&quot;#MongoDB数据库&quot; class=&quot;headerlink&quot; title=&quot;MongoDB数据库&quot;&gt;&lt;/a&gt;MongoDB数据库&lt;/h3&gt;&lt;p&gt;是一个基于分布式文件存储的数据库，数据结构是类似JSON的BSON格式，&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>学习路上的畔脚石</title>
    <link href="http://cctvboy.github.io/posts/e0b8.html"/>
    <id>http://cctvboy.github.io/posts/e0b8.html</id>
    <published>2023-11-10T09:01:58.647Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解决-fatal-unable-to-access-‘httpsgithub-comxxxxxxxxxxx-git’-Recv-failure-Connection-was-reset-报错"><a href="#解决-fatal-unable-to-access-‘httpsgithub-comxxxxxxxxxxx-git’-Recv-failure-Connection-was-reset-报错" class="headerlink" title="解决 fatal unable to access ‘httpsgithub.comxxxxxxxxxxx.git’ Recv failure Connection was reset 报错"></a>解决 fatal unable to access ‘httpsgithub.comxxxxxxxxxxx.git’ Recv failure Connection was reset 报错</h2><p>这个报错是当你设置了代理或者开了翻墙时自动配置代理时的错误，有两种解决办法；</p><p><strong>第一种：</strong></p><p>1.查看自己的代理地址的端口，打开网络设置—代理就能查看到</p><p>2.输入以下命令配置 Git 全局代理，xxx 输入端口号，配置之后就可以克隆远程仓库了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:xxx</span><br></pre></td></tr></table></figure><p><strong>第二种：</strong></p><p>全局不设置 http 和 https 代理，执行一下命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录学习路上的bug</summary>
    
    
    
    <category term="学习笔记" scheme="http://cctvboy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://cctvboy.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cctvboy.github.io/posts/0.html"/>
    <id>http://cctvboy.github.io/posts/0.html</id>
    <published>2023-11-10T09:01:58.647Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="echarts实现多个柱状图展示"><a href="#echarts实现多个柱状图展示" class="headerlink" title="echarts实现多个柱状图展示"></a>echarts实现多个柱状图展示</h3><p>在使用echarts时，有时会使用到多个一样的柱状图，但是所展示的数据需要不同的进行展示，所以就要设置共同的配置项，以此简化代码提高代码的复用率，echarts的使用复杂多样，以下是一个简单的柱状图的使用案例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 引入echarts --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>echarts使用案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 用于展示第一个柱状图的容器 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chartContainer1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; height: 200px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 用于展示第二个柱状图的容器 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chartContainer2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; height: 200px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- 用于展示第三个柱状图的容器 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chartContainer3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 400px; height: 200px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 准备数据数组，每个数组代表一个柱状图的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> dataSeries1 = [<span class="number">1.5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6.3</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> dataSeries2 = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1.3</span>, <span class="number">4</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> dataSeries3 = [<span class="number">6</span>, <span class="number">2</span>, <span class="number">3.6</span>, <span class="number">1.3</span>, <span class="number">4</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 共用的配置项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> commonOption = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">color</span>: [<span class="string">&#x27;#69b0ac&#x27;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">backgroundColor</span>: <span class="string">&quot;rgb(255, 255, 255, 0.1)&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 提示框</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">tooltip</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">yAxis</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 类目轴</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">axisTick</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 轴刻度不显示</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">show</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//文字颜色</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">axisLabel</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">show</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">textStyle</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">color</span>: <span class="string">&#x27;#69b0ac&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">xAxis</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//刻度的取值范围</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">min</span>: <span class="number">1</span>, <span class="comment">// 最小值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">max</span>: <span class="number">7</span>, <span class="comment">// 最大值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 与边框的距离</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">grid</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">left</span>: <span class="string">&#x27;23%&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">top</span>: <span class="string">&#x27;10%&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">bottom</span>: <span class="string">&#x27;18%&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">right</span>: <span class="string">&#x27;8%&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">series</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>: <span class="string">&#x27;图例&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">barWidth</span>: <span class="number">20</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">data</span>: dataSeries1,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;, ],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 创建第一个柱状图实例，并使用 commonOption 配置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> chart1 = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;chartContainer1&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">commonOption.<span class="property">yAxis</span>.<span class="property">data</span> = [<span class="string">&#x27;类别1&#x27;</span>, <span class="string">&#x27;类别2&#x27;</span>, <span class="string">&#x27;类别3&#x27;</span>, <span class="string">&#x27;类别4&#x27;</span>, <span class="string">&#x27;类别5&#x27;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">chart1.<span class="title function_">setOption</span>(commonOption);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 创建第二个柱状图实例，并使用 commonOption 配置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> chart2 = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;chartContainer2&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">commonOption.<span class="property">yAxis</span>.<span class="property">data</span> = [<span class="string">&#x27;类别A&#x27;</span>, <span class="string">&#x27;类别B&#x27;</span>, <span class="string">&#x27;类别C&#x27;</span>, <span class="string">&#x27;类别D&#x27;</span>, <span class="string">&#x27;类别E&#x27;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">commonOption.<span class="property">series</span>[<span class="number">0</span>].<span class="property">data</span> = dataSeries2;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">chart2.<span class="title function_">setOption</span>(commonOption);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 创建第三个柱状图实例，并使用 commonOption 配置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> chart3 = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;chartContainer3&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">commonOption.<span class="property">yAxis</span>.<span class="property">data</span> = [<span class="string">&#x27;类别A4&#x27;</span>, <span class="string">&#x27;类别B2&#x27;</span>, <span class="string">&#x27;类别C3&#x27;</span>, <span class="string">&#x27;类别D6&#x27;</span>, <span class="string">&#x27;类别E5&#x27;</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">commonOption.<span class="property">series</span>[<span class="number">0</span>].<span class="property">data</span> = dataSeries3;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">chart3.<span class="title function_">setOption</span>(commonOption);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果展示：</p><p><img src="C:\Users\Boy\AppData\Roaming\Typora\typora-user-images\image-20230721085009934.png" alt="image-20230721085009934"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;echarts实现多个柱状图展示&quot;&gt;&lt;a href=&quot;#echarts实现多个柱状图展示&quot; class=&quot;headerlink&quot; title=&quot;echarts实现多个柱状图展示&quot;&gt;&lt;/a&gt;echarts实现多个柱状图展示&lt;/h3&gt;&lt;p&gt;在使用echarts时，有时</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cctvboy.github.io/posts/0.html"/>
    <id>http://cctvboy.github.io/posts/0.html</id>
    <published>2023-11-10T09:01:58.647Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装使用的方式有直接引入，使用cdn和npm，"><a href="#安装使用的方式有直接引入，使用cdn和npm，" class="headerlink" title="安装使用的方式有直接引入，使用cdn和npm，"></a>安装使用的方式有直接引入，使用cdn和npm，</h4><h5 id="1-直接引入"><a href="#1-直接引入" class="headerlink" title="1.直接引入"></a>1.直接引入</h5><p>去官网链接下载，从GitHub获取 <a href="https://github.com/apache/echarts">apache/echarts</a> 项目的 <a href="https://github.com/apache/echarts/releases">release</a> 页面可以找到各个版本的链接。点击下载页面下方 Assets 中的 Source code，解压后 <code>dist</code> 目录下的 <code>echarts.js</code> 即为包含完整 ECharts 功能的文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入下载的 <span class="title class_">ECharts</span> 文件 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;echarts.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="2-使用cdn"><a href="#2-使用cdn" class="headerlink" title="2.使用cdn"></a>2.使用cdn</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/echarts@5.4.2/dist/echarts.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="3-npm"><a href="#3-npm" class="headerlink" title="3.npm"></a>3.npm</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts</span><br></pre></td></tr></table></figure><h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个 ECharts 实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 引入 echarts.js --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/echarts/4.3.0/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px;height:400px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 指定图表的配置项和数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> option = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">title</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">text</span>: <span class="string">&#x27;第一个 ECharts 实例&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">tooltip</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">legend</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">data</span>:[<span class="string">&#x27;销量&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">xAxis</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">data</span>: [<span class="string">&quot;衬衫&quot;</span>,<span class="string">&quot;羊毛衫&quot;</span>,<span class="string">&quot;雪纺衫&quot;</span>,<span class="string">&quot;裤子&quot;</span>,<span class="string">&quot;高跟鞋&quot;</span>,<span class="string">&quot;袜子&quot;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">yAxis</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">series</span>: [&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>: <span class="string">&#x27;销量&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">type</span>: <span class="string">&#x27;bar&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">data</span>: [<span class="number">5</span>, <span class="number">20</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">20</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        myChart.<span class="title function_">setOption</span>(option);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;h4 id=&quot;安装使用的方式有直接引入，使用cdn和npm，&quot;&gt;&lt;a href=&quot;#安装使用的方式有直接引入，使用cdn和npm，&quot; class</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://cctvboy.github.io/posts/3eeb.html"/>
    <id>http://cctvboy.github.io/posts/3eeb.html</id>
    <published>2023-11-10T09:01:58.647Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cctvboy.github.io/posts/0.html"/>
    <id>http://cctvboy.github.io/posts/0.html</id>
    <published>2023-11-10T09:01:58.647Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js中的const-、let、var的使用。"><a href="#js中的const-、let、var的使用。" class="headerlink" title="js中的const 、let、var的使用。"></a>js中的const 、let、var的使用。</h2><ol><li><p><code>const</code>：用于声明常量，即一旦被赋值后不能再修改的变量。建议在需要声明不可变的值时使用 <code>const</code>。例如，用于存储不会改变的配置参数或常量值。</p></li><li><p><code>let</code>：用于声明块级作用域的变量，它的作用域限定在当前代码块（大括号）内。建议在需要在特定的代码块中使用的变量时使用 <code>let</code>。例如，在循环中声明迭代变量或在条件语句中声明临时变量。</p></li><li><p><code>var</code>：在 ES6 之前是主要的变量声明关键字，它的作用域是函数级的（函数内部可见）。然而，它的行为与 <code>let</code> 和 <code>const</code> 有一些不同，容易导致一些意外的结果。因此，建议在现代 JavaScript 中尽量避免使用 <code>var</code>。可以使用 <code>let</code> 或 <code>const</code> 来代替 <code>var</code>，以获得更好的作用域控制和代码可读性。</p></li></ol><p>在选择使用 <code>let</code> 或 <code>const</code> 时，可以考虑以下几点：</p><ul><li>如果变量的值不会改变，使用 <code>const</code> 来明确表示其为常量，以便在代码中传达不可变性的意图。</li><li>如果变量的值需要被修改，使用 <code>let</code> 来声明可变的变量，并根据需要在适当的作用域范围内使用它。</li></ul><h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><ol><li><p><strong>创建数组：</strong> 可以使用字面量或构造函数创建数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用字面量创建数组</span></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用构造函数创建数组</span></span><br><span class="line"><span class="keyword">const</span> array2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>访问数组元素：</strong> 使用索引访问数组中的元素，索引从 0 开始。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">0</span>]); <span class="comment">// 输出 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array[<span class="number">2</span>]); <span class="comment">// 输出 30</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组长度：</strong> 使用 <code>length</code> 属性获取数组的长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="property">length</span>); <span class="comment">// 输出 5</span></span><br></pre></td></tr></table></figure></li><li><p><strong>添加和删除元素：</strong> 使用 <code>push()</code> 方法向数组末尾添加元素，使用 <code>pop()</code> 方法从数组末尾删除元素，使用 <code>unshift()</code> 方法向数组开头添加元素，使用 <code>shift()</code> 方法从数组开头删除元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">array.<span class="title function_">push</span>(<span class="number">4</span>); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">array.<span class="title function_">pop</span>(); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">array.<span class="title function_">unshift</span>(<span class="number">0</span>); <span class="comment">// [0, 1, 2, 3]</span></span><br><span class="line">array.<span class="title function_">shift</span>(); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组迭代：</strong> 可以使用 <code>for</code> 循环、<code>forEach()</code> 方法、<code>map()</code> 方法等来遍历数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for 循环遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(array[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 forEach() 方法遍历数组</span></span><br><span class="line">array.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 map() 方法遍历数组并返回新数组</span></span><br><span class="line"><span class="keyword">const</span> newArray = array.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>数组切片和拼接：</strong> 使用 <code>slice()</code> 方法截取数组的一部分，使用 <code>concat()</code> 方法将多个数组合并为一个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 截取数组的一部分</span></span><br><span class="line"><span class="keyword">const</span> subArray = array.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">// [2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并多个数组为一个数组</span></span><br><span class="line"><span class="keyword">const</span> newArray = array.<span class="title function_">concat</span>([<span class="number">6</span>, <span class="number">7</span>], [<span class="number">8</span>, <span class="number">9</span>]); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组排序和反转：</strong> 使用 <code>sort()</code> 方法对数组进行排序，默认按照字符串顺序排序，使用 <code>reverse()</code> 方法反转数组元素的顺序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数组进行排序</span></span><br><span class="line">array.<span class="title function_">sort</span>(); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转数组元素的顺序</span></span><br><span class="line">array.<span class="title function_">reverse</span>(); <span class="comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数组搜索和过滤：</strong> 使用 <code>indexOf()</code> 方法查找元素在数组中的索引，使用 <code>includes()</code> 方法检查元素是否存在于数组中，使用 <code>filter()</code> 方法根据条件筛选数组元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找元素在数组中的索引</span></span><br><span class="line"><span class="keyword">const</span> index = array.<span class="title function_">indexOf</span>(<span class="number">3</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查元素是否存在于数组中</span></span><br><span class="line"><span class="keyword">const</span> exists = array.<span class="title function_">includes</span>(<span class="number">4</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据条件筛选数组元素</span></span><br><span class="line"><span class="keyword">const</span> filteredArray = array.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">2</span>); <span class="comment">// [3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>其他数组方法：</strong> 还有许多其他有用的数组方法，如 <code>reduce()</code>、<code>every()</code>、<code>some()</code> 等，它们提供了丰富的功能和灵活的用法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 reduce() 方法求和</span></span><br><span class="line"><span class="keyword">const</span> sum = array.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, curr</span>) =&gt;</span> acc + curr, <span class="number">0</span>); <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 every() 方法检查所有元素是否满足条件</span></span><br><span class="line"><span class="keyword">const</span> allGreaterThanZero = array.<span class="title function_">every</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 some() 方法检查是否存在满足条件的元素</span></span><br><span class="line"><span class="keyword">const</span> hasEvenNumber = array.<span class="title function_">some</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><p>数组是 JavaScript 中常用的数据结构，它提供了许多强大的方法和灵活性，可用于处理各种数据和场景。熟悉数组的使用将有助于我们编写更高效和简洁的 JavaScript 代码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;js中的const-、let、var的使用。&quot;&gt;&lt;a href=&quot;#js中的const-、let、var的使用。&quot; class=&quot;headerlink&quot; title=&quot;js中的const 、let、var的使用。&quot;&gt;&lt;/a&gt;js中的const 、let、var的使</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue2学习笔记</title>
    <link href="http://cctvboy.github.io/posts/e0b8.html"/>
    <id>http://cctvboy.github.io/posts/e0b8.html</id>
    <published>2023-11-10T09:01:58.647Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue文件目录"><a href="#Vue文件目录" class="headerlink" title="Vue文件目录"></a>Vue文件目录</h3><ul><li><strong>node_modules</strong>：项目的依赖文件夹，存放了项目所需的各种模块和包。</li><li><strong>public</strong>：用于存放项目使用到的一些静态资源（图片、图标、网页模板等），在最后webpack打包时会直接放入dist文件夹内。</li><li><strong>src</strong>：程序的源代码文件夹，包含了项目的主要逻辑和组件。<ul><li><strong>assets</strong>：一般用于放置src里的组件所使用的静态资源（图片、样式、字体等），在webpack打包时会被当成一个模块打包到js文件夹里。</li><li><strong>components</strong>：一般用于放置非路由组件和全局组件，即不需要在地址栏中显示的组件。</li><li><strong>router</strong>：用于配置路由，即根据不同的地址显示不同的组件。</li><li><strong>store</strong>：用于管理应用的状态，即组件之间共享的数据和方法。</li><li><strong>views/pages：</strong>一般用于放置路由组件，即需要在地址栏中显示的组件。</li><li><strong>App.vue</strong>：项目中唯一的根组件，所有其他组件都是它的子组件。</li><li><strong>main.js</strong>：程序的入口文件，项目中第一个执行的文件，负责引入和挂载各种依赖和插件。</li></ul></li><li><strong>.env</strong>：用于存储全局环境变量，可以根据不同的环境（开发、测试、生产等）设置不同的变量值。</li><li><strong>babel.config.js</strong>：项目的配置文件，一般用于兼容es5和es6语法，以及其他高级特性。</li><li><strong>package.json</strong>：记录vue项目的相关信息，如项目名称、版本、作者、依赖、脚本等。</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>Vue.js 组件的生命周期钩子是一系列的回调函数，允许在组件的不同阶段执行代码。。Vue 组件的生命周期可以分为以下几个阶段：</p><ol><li><p><strong>创建阶段（Creation）：</strong></p><ul><li><code>beforeCreate</code>：在实例被创建之前调用，此时实例的数据、计算属性等还未初始化。</li><li><code>created</code>：在组件实例被创建后调用，此时实例已经完成了数据初始化，但尚未挂载到 DOM 上。可以进行一些数据初始化、访问 props 和调用 API 等操作。</li></ul></li><li><p><strong>挂载阶段（Mounting）：</strong></p><ul><li><code>beforeMount</code>：在实例被挂载到 DOM 前调用，此时模板编译已完成，但还未将模板渲染到 DOM 中。</li><li><code>mounted</code>：在实例被挂载到 DOM 后调用，此时实例已经在 DOM 中渲染，可以进行 DOM 操作和异步请求。这个钩子函数常用于进行 DOM 操作、获取数据，或初始化一些第三方库。它是执行一次性任务的好地方。</li></ul></li><li><p><strong>更新阶段（Updating）：</strong></p><ul><li><code>beforeUpdate</code>：在数据更新之前调用，可以用来访问更新前的数据状态。</li><li><code>updated</code>：在数据更新后调用，DOM 已经重新渲染，可以执行额外的 DOM 操作。在响应数据变化后执行操作的地方，但要注意避免在这里更新数据，以免陷入无限循环。</li></ul></li><li><p><strong>销毁阶段（Destruction）：</strong></p><ul><li><code>beforeDestroy</code>：在实例销毁之前调用，此时实例仍然可用，可以做一些清理工作。如取消订阅、清除定时器、解绑事件等。</li><li><code>destroyed</code>：在实例销毁后调用，此时实例已经被完全销毁，不再可用。</li></ul></li><li><p><strong>错误捕获阶段（Error Handling）：</strong></p><ul><li><code>errorCaptured</code>：在子孙组件抛出错误时调用，可以捕获并处理错误。</li></ul></li></ol><h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><p><code>ref</code>是Vue中的一个特殊属性，用于在组件中创建对DOM元素或组件实例的引用。它可以在Vue组件中的模板、脚本和方法中使用。</p><ol><li><p>创建引用：通过在DOM元素或组件上添加<code>ref</code>属性，可以创建一个引用。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;myInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>//打标识</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们给<code>input</code>元素添加了一个<code>ref</code>属性，创建了一个名为<code>myInput</code>的引用。</p></li><li><p>访问引用：可以使用<code>this.$refs</code>对象来访问<code>ref</code>引用。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> inputElement = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">myInput</span>;</span><br><span class="line">      <span class="comment">// 对引用进行操作</span></span><br><span class="line">      inputElement.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在<code>handleClick</code>方法中，通过<code>this.$refs.myInput</code>访问了名为<code>myInput</code>的引用，并对其进行了操作。</p></li><li><p>引用组件实例：除了引用DOM元素，<code>ref</code>还可以用于引用Vue组件的实例。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">ref</span>=<span class="string">&quot;myComponentRef&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，通过<code>ref</code>引用了名为<code>myComponentRef</code>的<code>my-component</code>组件的实例。</p></li><li><p>注意事项：</p><ul><li><code>ref</code>属性只能用于Vue组件内部，不能用于根组件或父组件引用子组件。</li><li>当使用<code>ref</code>引用组件实例时，需要注意生命周期钩子的时机，确保在组件实例完全创建之后再访问。</li><li>在响应式数据更新后，<code>ref</code>引用的DOM元素或组件实例会被更新。</li></ul></li></ol><p><code>ref</code>属性在访问DOM元素、组件实例以及进行一些特定操作时非常有用。然而，应该注意过度使用<code>ref</code>可能会导致代码不够清晰，应谨慎使用。</p><h3 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h3><p>功能:可以把多个组件共用的配置提取成一个混入对象使用方式:<br>第一步定义混合，例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;....&#125;</span><br><span class="line">methods:[....]</span><br></pre></td></tr></table></figure><p>第二步使用混入，例如:<br>(1).全局混入: Vue.mixin(xxx）<br>(2)局部混入: mixins:[‘xxx’]</p><h3 id="webStorage（浏览器缓存）"><a href="#webStorage（浏览器缓存）" class="headerlink" title="webStorage（浏览器缓存）"></a>webStorage（浏览器缓存）</h3><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></p><pre><code>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</code></pre></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>​        该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p>​        该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code>xxxxxStorage.clear()</code></p><p>​        该方法会清空存储中的所有数据。</p></li></ol></li><li><p>区别：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h3 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h3><p>Vue组件的自定义事件是一种组件间通信的方式，适用于子组件向父组件传递数据或行为。</p><p>简单来说，就是父组件使用 v-on 或 ref 属性给子组件绑定一个自定义事件，子组件使用 $emit 方法触发这个事件，并传递参数。</p><p>例如，父组件可以这样绑定自定义事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Child</span> @<span class="attr">my-event</span>=<span class="string">&quot;handleEvent&quot;</span>/&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>/&gt;</span></span><br><span class="line">...</span><br><span class="line">mounted() &#123;</span><br><span class="line">  this.$refs.child.$on(&#x27;my-event&#x27;, handleEvent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件可以这样触发自定义事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;my-event&#x27;</span>, someData)</span><br></pre></td></tr></table></figure><p>父组件可以在 handleEvent 方法中接收并处理子组件传递的 someData 参数。</p><p>自定义事件还可以有以下特点：</p><ul><li>可以使用 once 修饰符或 $once 方法让自定义事件只触发一次。</li><li>可以使用 $off 方法解绑自定义事件，释放内存。</li><li>可以使用 native 修饰符绑定原生 DOM 事件到子组件上。</li><li>可以传递多个参数，也可以使用扩展运算符接收所有参数。</li></ul><h3 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h3><p>全局事件总线是一种组件间通信的方式，适用于任意组件间通信。</p><p>全局事件总线的原理是利用一个 Vue 实例作为中间媒介，让不同的组件可以通过这个实例来绑定和触发自定义事件，从而实现数据的传递和接收。</p><p>全局事件总线的使用步骤如下：</p><ul><li>在 main.js 中创建一个全局事件总线，并挂载到 Vue 原型上，使得所有的组件都可以访问到它。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建全局事件总线</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br></pre></td></tr></table></figure><ul><li>在需要接收数据的组件中，使用 $on 方法绑定一个自定义事件，并定义一个回调函数来处理接收到的数据。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定自定义事件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;my-event&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理接收到的数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>在需要发送数据的组件中，使用 $emit 方法触发刚才绑定的自定义事件，并传递一个参数作为数据。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发自定义事件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;my-event&#x27;</span>, someData)</span><br></pre></td></tr></table></figure><ul><li>在不需要使用全局事件总线的时候，使用 $off 方法解绑自定义事件，避免内存泄漏。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解绑自定义事件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;my-event&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h3><p>在Vue.js中，可以通过配置代理（Proxy）来解决前端开发中的跨域请求问题。代理可以将前端的请求转发到后端的目标服务器，从而避免浏览器的跨域限制。</p><p>以下是在Vue.js中配置代理的一般步骤：</p><ol><li><p>打开Vue项目的配置文件：在Vue项目的根目录中，找到并打开<code>vue.config.js</code>文件（如果没有该文件，可以手动创建一个）。</p></li><li><p>在配置文件中添加代理配置：在<code>vue.config.js</code>文件中，添加以下代码来配置代理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>, <span class="comment">// 后端目标服务器的地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,<span class="comment">//用于控制请求头中的host值</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">// 如果接口路径有特定前缀，可以使用pathRewrite进行重写</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上述示例中，代理的配置通过<code>devServer</code>对象下的<code>proxy</code>选项来实现。<code>&#39;/api&#39;</code>是前端请求的路径前缀，<code>&#39;http://localhost:3000&#39;</code>是后端目标服务器的地址。根据实际情况进行修改。</p></li><li><p>重启开发服务器：在配置文件保存后，重启Vue开发服务器，以使配置生效。</p></li><li><p>发起请求：在Vue组件中，通过使用相对路径（以<code>/api</code>开头）来发起请求。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/users&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理响应</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理错误</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>在上述示例中，请求路径以<code>/api</code>开头，将被代理到配置中指定的目标服务器。通过以上配置，Vue开发服务器会将以<code>/api</code>开头的请求转发到后端目标服务器，并将响应返回给前端。</p></li></ol><p><strong>注意：</strong>配置代理只在开发环境中生效，对生产环境无影响。在生产环境中，您需要将请求路径正确配置为后端服务器的实际地址。</p><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><h5 id="1-默认插槽"><a href="#1-默认插槽" class="headerlink" title="1.默认插槽"></a>1.默认插槽</h5><ul><li>默认插槽是没有特定名称的插槽，在子组件中使用<code>&lt;slot&gt;</code>元素作为默认内容的位置。</li><li>父组件可以在组件标签中的默认位置传递内容给子组件，默认内容将会被渲染在默认插槽中。</li></ul><h5 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2.具名插槽"></a>2.具名插槽</h5><ul><li>父组件可以在组件标签中使用具名插槽，并通过特定的名称将内容传递给子组件。</li><li>子组件中使用<code>&lt;slot&gt;</code>元素来定义插槽的位置，可以设置默认内容。</li><li>父组件可以在插槽中传递任意的HTML、组件或其他内容。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ParentComponent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-component</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is the header slot content<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the footer slot content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ChildComponent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个案例中，父组件（ParentComponent）通过使用命名插槽，将具体的内容传递给子组件（ChildComponent）的不同插槽位置，分别是<code>header</code>和<code>footer</code>。子组件通过使用<code>&lt;slot&gt;</code>元素将这些内容进行渲染。</p><h5 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3.作用域插槽"></a>3.作用域插槽</h5><ul><li>作用域插槽允许父组件将数据传递给子组件，并在子组件中使用该数据进行渲染。</li><li>子组件中使用<code>&lt;slot&gt;</code>元素的<code>v-bind</code>指令来绑定数据，并使用作用域插槽的特殊语法进行命名。</li><li>父组件在使用作用域插槽时，可以使用<code>&lt;template&gt;</code>元素来定义插槽的内容，并通过<code>slot-scope</code>属性来访问子组件传递的数据。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ParentComponent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-component</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; props.title &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; props.content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ChildComponent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:title</span>=<span class="string">&quot;data.title&quot;</span> <span class="attr">:content</span>=<span class="string">&quot;data.content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: <span class="string">&#x27;Title&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">content</span>: <span class="string">&#x27;Content&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个案例中，父组件（ParentComponent）通过使用作用域插槽，在子组件（ChildComponent）中将数据传递给插槽内容。子组件通过使用<code>&lt;slot&gt;</code>元素，并在父组件中定义的插槽中绑定数据，从而在插槽中渲染数据。</p><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>​        在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h4 id="何时使用？"><a href="#何时使用？" class="headerlink" title="何时使用？"></a>何时使用？</h4><p>​        多个组件需要共享数据时</p><h4 id="搭建vuex环境"><a href="#搭建vuex环境" class="headerlink" title="搭建vuex环境"></a>搭建vuex环境</h4><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h4 id="getters的使用"><a href="#getters的使用" class="headerlink" title="getters的使用"></a>getters的使用</h4><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h4 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h4><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h4 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化+命名空间"></a>模块化+命名空间</h4><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h3 id="vue路由"><a href="#vue路由" class="headerlink" title="vue路由"></a>vue路由</h3><p>Vue路由（Vue Router）是Vue.js官方提供的用于构建单页应用（SPA）的路由管理库。它允许在Vue应用程序中实现客户端路由，即在不刷新整个页面的情况下，通过切换组件来实现不同的页面效果。</p><ol><li><strong>路由配置：</strong><ul><li>在Vue应用程序中使用Vue Router需要进行路由配置。</li><li>在<code>router.js</code>文件中，定义路由映射关系，指定路由路径和对应的组件。</li></ul></li></ol><ul><li><p>使用<code>VueRouter</code>实例来创建一个路由器对象，并将路由配置传递给它。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 1.router.js中配置路由</span></span><br><span class="line">   <span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line">   <span class="comment">//引入路由</span></span><br><span class="line">   <span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Home.vue&#x27;</span>;</span><br><span class="line">   <span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./views/About.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">        routes = [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">         &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;</span><br><span class="line">       ]</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">default</span> router;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//2.在main.js中引入配置</span></span><br><span class="line">      <span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">      <span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">      <span class="comment">// 引入路由插件</span></span><br><span class="line">      <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line">   </span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line">   </span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">        router</span><br><span class="line">      &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">   <span class="comment">//3.指定路由展示位置</span></span><br><span class="line">         &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//实现切换（active-class可配置高亮样式）</span></span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h4><ul><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ul></li></ul><p>2.<strong>路由导航：</strong></p><ul><li>通过<code>&lt;router-link&gt;</code>组件或编程式导航，可以在不同的路由之间进行切换。</li><li><code>&lt;router-link&gt;</code>组件用于生成带有正确路径的链接。</li><li><p>使用<code>$router</code>对象的<code>push</code>方法或<code>replace</code>方法来进行编程式导航。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Home.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">goToAbout</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/about&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>动态路由：</p><ul><li>动态路由允许在路由路径中使用参数，根据参数的不同，动态加载不同的组件。</li><li>使用冒号（<code>:</code>）定义动态片段，参数将作为路由对象的属性提供给组件。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">userId</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>嵌套路由：</p><ul><li>嵌套路由允许在一个路由中嵌套另一个路由，从而实现更复杂的页面结构。</li><li>在路由配置中使用<code>children</code>选项来定义子路由。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/parent&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Parent</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&#x27;child&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Child</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Parent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/parent/child&quot;</span>&gt;</span>Child<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Child.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Child component created&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">记录学习vue2的知识点</summary>
    
    
    
    <category term="学习笔记" scheme="http://cctvboy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://cctvboy.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cctvboy.github.io/posts/0.html"/>
    <id>http://cctvboy.github.io/posts/0.html</id>
    <published>2023-11-10T09:01:58.647Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><ul><li><strong>node_modules</strong>：项目的依赖文件夹，存放了项目所需的各种模块和包。</li><li><strong>public</strong>：用于存放项目使用到的一些静态资源（图片、图标、网页模板等），在最后webpack打包时会直接放入dist文件夹内。</li><li><strong>src</strong>：程序的源代码文件夹，包含了项目的主要逻辑和组件。<ul><li><strong>assets</strong>：一般用于放置src里的组件所使用的静态资源（图片、样式、字体等），在webpack打包时会被当成一个模块打包到js文件夹里。</li><li><strong>components</strong>：一般用于放置非路由组件和全局组件，即不需要在地址栏中显示的组件。</li><li><strong>router</strong>：用于配置路由，即根据不同的地址显示不同的组件。</li><li><strong>store</strong>：用于管理应用的状态，即组件之间共享的数据和方法。</li><li><strong>views</strong>：一般用于放置路由组件，即需要在地址栏中显示的组件。</li><li><strong>App.vue</strong>：项目中唯一的根组件，所有其他组件都是它的子组件。</li><li><strong>main.js</strong>：程序的入口文件，项目中第一个执行的文件，负责引入和挂载各种依赖和插件。</li></ul></li><li><strong>.env</strong>：用于存储全局环境变量，可以根据不同的环境（开发、测试、生产等）设置不同的变量值。</li><li><strong>babel.config.js</strong>：项目的配置文件，一般用于兼容es5和es6语法，以及其他高级特性。</li><li><strong>package.json</strong>：记录vue项目的相关信息，如项目名称、版本、作者、依赖、脚本等。</li></ul><h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><p><code>ref</code>是Vue中的一个特殊属性，用于在组件中创建对DOM元素或组件实例的引用。它可以在Vue组件中的模板、脚本和方法中使用。</p><ol><li><p>创建引用：通过在DOM元素或组件上添加<code>ref</code>属性，可以创建一个引用。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;myInput&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们给<code>input</code>元素添加了一个<code>ref</code>属性，创建了一个名为<code>myInput</code>的引用。</p></li><li><p>访问引用：可以使用<code>this.$refs</code>对象来访问<code>ref</code>引用。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> inputElement = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">myInput</span>;</span><br><span class="line">      <span class="comment">// 对引用进行操作</span></span><br><span class="line">      inputElement.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在<code>handleClick</code>方法中，通过<code>this.$refs.myInput</code>访问了名为<code>myInput</code>的引用，并对其进行了操作。</p></li><li><p>引用组件实例：除了引用DOM元素，<code>ref</code>还可以用于引用Vue组件的实例。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">ref</span>=<span class="string">&quot;myComponentRef&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们通过<code>ref</code>引用了名为<code>myComponentRef</code>的<code>my-component</code>组件的实例。</p></li><li><p>注意事项：</p><ul><li><code>ref</code>属性只能用于Vue组件内部，不能用于根组件或父组件引用子组件。</li><li>当使用<code>ref</code>引用组件实例时，需要注意生命周期钩子的时机，确保在组件实例完全创建之后再访问。</li><li>在响应式数据更新后，<code>ref</code>引用的DOM元素或组件实例会被更新。</li></ul></li></ol><p><code>ref</code>属性在访问DOM元素、组件实例以及进行一些特定操作时非常有用。然而，应该注意过度使用<code>ref</code>可能会导致代码不够清晰，应谨慎使用。</p><h3 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h3><p>功能:可以把多个组件共用的配置提取成一个混入对象使用方式:<br>第一步定义混合，例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;....&#125;</span><br><span class="line">methods:[....]</span><br></pre></td></tr></table></figure><p>第二步使用混入，例如:<br>(1).全局混入: Vue.mixin(xxx<br>(2)局部混入: mixins:[‘xxx’]</p><h3 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>一种组件间通信的方式，适用于: 子组件 ===&gt;父组件</span><br><span class="line"><span class="number">2.</span>使用场景:A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件(事件的回调在A中)。<span class="number">3.</span>绑定自定义事件:</span><br><span class="line"><span class="number">1</span>,第一种方式，在父组件中: <span class="language-xml"><span class="tag">&lt;<span class="name">Deo</span> @<span class="attr">atguigu</span>=<span class="string">&quot;test&quot;</span>/&gt;</span></span> 或&lt;<span class="title class_">Demo</span> v-on;atguigu=<span class="string">&quot;test&quot;</span>/&gt;</span><br><span class="line"><span class="number">2.</span>第二种方式，在父组件中:</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">ref</span>=<span class="string">&quot;demo&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&quot;,this.test);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">3.若想让自定义事件只能触发一次，可以使用 once 饰符;</span></span><br><span class="line"><span class="string">4.触发自定义事件:this.$emit(&#x27;</span>atguigu<span class="string">&quot;,数据)</span></span><br><span class="line"><span class="string">5.解绑自定义事件this.$off(&#x27;atguigu&#x27;)</span></span><br><span class="line"><span class="string">6.组件上也可以绑定原生DOM事件，需要使用 native 修饰符</span></span><br><span class="line"><span class="string">7.注意: 通过 this.$refs.xxx.$on(&quot;</span>atguigu<span class="string">&quot;,回调)绑定自定义事件时，回调要么配置在methods中，要么用等头函数,否则this指向会出问题。</span></span><br></pre></td></tr></table></figure><p>Vue组件的自定义事件是一种组件间通信的方式，适用于子组件向父组件传递数据或行为。</p><p>简单来说，就是父组件使用 v-on 或 ref 属性给子组件绑定一个自定义事件，子组件使用 $emit 方法触发这个事件，并传递参数。</p><p>例如，父组件可以这样绑定自定义事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Child</span> @<span class="attr">my-event</span>=<span class="string">&quot;handleEvent&quot;</span>/&gt;</span></span><br><span class="line">或</span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>/&gt;</span></span><br><span class="line">...</span><br><span class="line">mounted() &#123;</span><br><span class="line">  this.$refs.child.$on(&#x27;my-event&#x27;, handleEvent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件可以这样触发自定义事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;my-event&#x27;</span>, someData)</span><br></pre></td></tr></table></figure><p>父组件可以在 handleEvent 方法中接收并处理子组件传递的 someData 参数。</p><p>自定义事件还可以有以下特点：</p><ul><li>可以使用 once 修饰符或 $once 方法让自定义事件只触发一次。</li><li>可以使用 $off 方法解绑自定义事件，释放内存。</li><li>可以使用 native 修饰符绑定原生 DOM 事件到子组件上。</li><li>可以传递多个参数，也可以使用扩展运算符接收所有参数。</li></ul><h3 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h3><p>全局事件总线是一种组件间通信的方式，适用于任意组件间通信。</p><p>全局事件总线的原理是利用一个 Vue 实例作为中间媒介，让不同的组件可以通过这个实例来绑定和触发自定义事件，从而实现数据的传递和接收。</p><p>全局事件总线的使用步骤如下：</p><ul><li>在 main.js 中创建一个全局事件总线，并挂载到 Vue 原型上，使得所有的组件都可以访问到它。¹³⁴</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建全局事件总线</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br></pre></td></tr></table></figure><ul><li>在需要接收数据的组件中，使用 $on 方法绑定一个自定义事件，并定义一个回调函数来处理接收到的数据。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定自定义事件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;my-event&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理接收到的数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>在需要发送数据的组件中，使用 $emit 方法触发刚才绑定的自定义事件，并传递一个参数作为数据。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发自定义事件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;my-event&#x27;</span>, someData)</span><br></pre></td></tr></table></figure><ul><li>在不需要使用全局事件总线的时候，使用 $off 方法解绑自定义事件，避免内存泄漏。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解绑自定义事件</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;my-event&#x27;</span>)</span><br></pre></td></tr></table></figure><p>(1) 【Vue全局事件总线详解】 - 掘金. <a href="https://juejin.cn/post/7082997603905830920">https://juejin.cn/post/7082997603905830920</a>.<br>(2) Vue2中的全局事件总线的安装与使用 - CSDN博客. <a href="https://blog.csdn.net/weixin_53965547/article/details/124399124">https://blog.csdn.net/weixin_53965547/article/details/124399124</a>.<br>(3) Vue事件总线（EventBus） - 简书. <a href="https://www.jianshu.com/p/4b0e84319dc1">https://www.jianshu.com/p/4b0e84319dc1</a>.<br>(4) 【Vue3】中全局事件总线 $bus 的使用 - 掘金. <a href="https://juejin.cn/post/7124512894489722917">https://juejin.cn/post/7124512894489722917</a>.<br>(5) Vue2组件间通信-全局事件总线 - CSDN博客. <a href="https://blog.csdn.net/qq_53848768/article/details/120096288">https://blog.csdn.net/qq_53848768/article/details/120096288</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;文件目录&quot;&gt;&lt;a href=&quot;#文件目录&quot; class=&quot;headerlink&quot; title=&quot;文件目录&quot;&gt;&lt;/a&gt;文件目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;node_modules&lt;/strong&gt;：项目的依赖文件夹，存放了项目所需的各种模块和包。&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://cctvboy.github.io/posts/0.html"/>
    <id>http://cctvboy.github.io/posts/0.html</id>
    <published>2023-11-10T09:01:58.647Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SweetAlert2提示组件在Vue中的使用"><a href="#SweetAlert2提示组件在Vue中的使用" class="headerlink" title="SweetAlert2提示组件在Vue中的使用"></a>SweetAlert2提示组件在Vue中的使用</h2><p>安装：使用npm的方式进行安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sweetalert2</span><br></pre></td></tr></table></figure><p>使用：在需要使用的页面引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Swal</span> <span class="keyword">from</span> <span class="string">&#x27;sweetalert2&#x27;</span>;</span><br></pre></td></tr></table></figure><p>基本案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Swal.fire(&#123;</span><br><span class="line">  icon: &#x27;success&#x27;, //error\warning\info\question</span><br><span class="line">  title: &#x27;提示标题&#x27;,</span><br><span class="line">  text: &#x27;文本内容&#x27;,</span><br><span class="line">  showCancelButton: true,//是否显示取消按钮</span><br><span class="line">  confirmButtonColor: &#x27;#3085d6&#x27;,</span><br><span class="line">  cancelButtonColor: &#x27;#d33&#x27;,</span><br><span class="line">  confirmButtonText: &#x27;确认&#x27;,</span><br><span class="line">  confirmButton: false,</span><br><span class="line">  cancelButtonText: &#x27;取消&#x27;</span><br><span class="line">&#125;).then((result) =&gt; &#123;</span><br><span class="line">  // 点击确认时:result.isConfirmed = true,否则反之</span><br><span class="line">  if (result.isConfirmed) &#123;</span><br><span class="line">    console.log(&#x27;确认&#x27;);</span><br><span class="line">  &#125; else if (result.isDenied) &#123;</span><br><span class="line">    console.log(&#x27;取消&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h3><ul><li><p><code>JSON Web Token(JWT)</code> 是一个开放标准 <code>RFC 519</code>,它定义了一种紧凑且自包含的方式,用于作为 <code>JSON</code> 对象在各方面之间安全地传输信息;</p></li><li><p><code>JWT</code> 是一个数字签名,生成的信息是可以验证并被信任的;</p></li><li><p><code>JWT</code> 是目前最流行的跨域认证解决方案;</p></li></ul><p>在其紧凑形式中,<code>JWT</code> 由点 <code>.</code> 分割的三个部分组成,分别是:</p><ul><li><code>Header</code></li><li><code>Payload</code></li><li><code>Signature</code></li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符是用于对逻辑值进行操作和组合的运算符。常见的逻辑运算符包括以下几种：</p><ul><li><p>逻辑与（AND）：表示为 <code>&amp;&amp;</code>。当两个条件都为真时，逻辑与操作的结果为真；否则，结果为假。</p></li><li><p>逻辑或（OR）：表示为 <code>||</code>。当两个条件中至少有一个为真时，逻辑或操作的结果为真；只有当两个条件都为假时，结果才为假。</p></li><li><p>逻辑非（NOT）：表示为 <code>!</code>。用于取反操作，将真变为假，假变为真。</p></li></ul><p>逻辑运算符通常用于布尔类型的值，即逻辑值（true 或 false）的操作。它们可以用于条件语句、循环控制、逻辑表达式等方面，用于进行条件判断、逻辑组合和逻辑取反等操作。</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>算术运算符是用于执行数学运算的运算符。常见的算术运算符包括以下几种：</p><ul><li><p>加法（Addition）：用于将两个值相加。表示为 <code>+</code>。</p></li><li><p>减法（Subtraction）：用于将一个值减去另一个值。表示为 <code>-</code>。</p></li><li><p>乘法（Multiplication）：用于将两个值相乘。表示为 <code>*</code>。</p></li><li><p>除法（Division）：用于将一个值除以另一个值。表示为 <code>/</code>。</p></li><li><p>取余（Modulus）：用于获取两个数相除的余数。表示为 <code>%</code>。</p></li><li><p>自增（Increment）：用于将变量的值增加1。表示为 <code>++</code>。</p></li><li><p>自减（Decrement）：用于将变量的值减少1。表示为 <code>--</code>。</p></li></ul><p>算术运算符用于执行基本的数学计算，如加减乘除，以及取余操作。它们可以应用于数字类型的操作数，如整数和浮点数，以进行数值计算和操作。需要注意的是，算术运算符的操作数可以是变量或常量，运算结果通常也是数值类型。在进行算术运算时，应注意数值溢出、除数为零等异常情况，以确保正确的计算结果和避免运行时错误。</p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>比较运算符是用于比较两个值并返回布尔值（true 或 false）的运算符。常见的比较运算符包括以下几种：</p><ul><li><p>等于（Equal to）：用于检查两个值是否相等。表示为 <code>==</code>（相等）。</p></li><li><p>不等于（Not equal to）：用于检查两个值是否不相等。表示为 <code>!=</code>（不相等）。</p></li><li><p>大于（Greater than）：用于检查一个值是否大于另一个值。表示为 <code>&gt;</code>（大于）。</p></li><li><p>小于（Less than）：用于检查一个值是否小于另一个值。表示为 <code>&lt;</code>（小于）。</p></li><li><p>大于等于（Greater than or equal to）：用于检查一个值是否大于或等于另一个值。表示为 <code>&gt;=</code>（大于等于）。</p></li><li><p>小于等于（Less than or equal to）：用于检查一个值是否小于或等于另一个值。表示为 <code>&lt;=</code>（小于等于）。</p></li></ul><p>比较运算符用于执行条件判断和逻辑表达式，根据比较结果返回布尔值。比较运算符通常用于控制流程，如 if 语句、循环语句等，以根据条件的真假执行相应的代码块。需要注意的是，比较运算符的操作数可以是各种类型的值，包括数字、字符串、布尔值等。在进行比较运算时，类型的隐式转换和数据类型的一致性可能会影响比较结果，因此要小心处理类型转换和数据类型的一致性，以确保正确的比较结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SweetAlert2提示组件在Vue中的使用&quot;&gt;&lt;a href=&quot;#SweetAlert2提示组件在Vue中的使用&quot; class=&quot;headerlink&quot; title=&quot;SweetAlert2提示组件在Vue中的使用&quot;&gt;&lt;/a&gt;SweetAlert2提示组件在V</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组常用方法</title>
    <link href="http://cctvboy.github.io/posts/9b0f.html"/>
    <id>http://cctvboy.github.io/posts/9b0f.html</id>
    <published>2023-11-01T11:51:26.000Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h4 id="1-pop-和push-这两个方法用于数组结尾的删除和添加"><a href="#1-pop-和push-这两个方法用于数组结尾的删除和添加" class="headerlink" title="1.pop()和push()这两个方法用于数组结尾的删除和添加"></a>1.<code>pop()</code>和<code>push()</code>这两个方法用于数组结尾的删除和添加</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line"><span class="comment">//添加到数组的尾端</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">6</span>) <span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line"><span class="comment">//再次调用pop方法就删除了最后一位</span></span><br><span class="line">arr.<span class="title function_">pop</span>()<span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><h4 id="2-unshift-和shift-用于在数组的首位进行删除和添加"><a href="#2-unshift-和shift-用于在数组的首位进行删除和添加" class="headerlink" title="2.unshift()和shift()用于在数组的首位进行删除和添加"></a>2.<code>unshift()</code>和<code>shift()</code>用于在数组的首位进行删除和添加</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line"><span class="comment">//添加到数组的前端</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">6</span>) <span class="comment">//[6,1,2,3,4,5]</span></span><br><span class="line"><span class="comment">//再次调用shift方法就删除了第一位</span></span><br><span class="line">arr.<span class="title function_">shift</span>()<span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><h4 id="3-sort-排序"><a href="#3-sort-排序" class="headerlink" title="3.sort() 排序"></a>3.<code>sort()</code> 排序</h4><p>接受一个可选的比较函数作为参数，来定义排序的规则。比较函数应该返回两个元素之间的差值，正数表示前者大于后者，负数表示前者小于后者，零表示两者相等；会改变原数组，它的默认排序方式是将元素转换为字符串，然后按照它们的 UTF-16 码元值升序排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>, <span class="string">&quot;Charlie&quot;</span>, <span class="number">25</span>, <span class="string">&quot;David&quot;</span>, <span class="number">100</span>, <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Eve&quot;</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[2, 25, 100, &quot;A&quot;, &quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;, &quot;David&quot;, &quot;Eve&quot;, &quot;a&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="4-reverse-对数组进行反转，顺序颠倒"><a href="#4-reverse-对数组进行反转，顺序颠倒" class="headerlink" title="4.reverse()对数组进行反转，顺序颠倒"></a>4.<code>reverse()</code>对数组进行反转，顺序颠倒</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>, <span class="string">&quot;Charlie&quot;</span>, <span class="number">25</span>, <span class="string">&quot;David&quot;</span>, <span class="number">100</span>, <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Eve&quot;</span>];</span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[&#x27;Eve&#x27;, &#x27;Bob&#x27;, &#x27;a&#x27;, &#x27;A&#x27;, &#x27;Alice&#x27;, 100, &#x27;David&#x27;, 25, &#x27;Charlie&#x27;, 2]</span></span><br></pre></td></tr></table></figure><h4 id="5-splice-删除、替换或添加元素"><a href="#5-splice-删除、替换或添加元素" class="headerlink" title="5.splice() 删除、替换或添加元素"></a>5.<code>splice()</code> 删除、替换或添加元素</h4><p>接收三个或以上的参数，第一个是截取的索引位置，第二个是截取的个数，第三个或更多是在截取位置添加的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>, <span class="string">&quot;Charlie&quot;</span>, <span class="number">25</span>, <span class="string">&quot;David&quot;</span>, <span class="number">100</span>, <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;a&quot;</span>];</span><br><span class="line"><span class="comment">//在索引为2的位置截取一个，并在索引2的位置后添加57</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">57</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[2, &#x27;Charlie&#x27;, 57, &#x27;David&#x27;, 100, &#x27;Alice&#x27;, &#x27;A&#x27;, &#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="6-filter-数据过滤"><a href="#6-filter-数据过滤" class="headerlink" title="6.filter() 数据过滤"></a>6.<code>filter()</code> 数据过滤</h4><p>接收一个回调函数作为参数，回调函数有三个形参，分别是当前元素，当前索引，和数组本身；它不会改变原数组，而是返回一个新的数组。如果没有元素满足条件，就返回一个空数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&quot;March&quot;</span>, <span class="string">&quot;Jan&quot;</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;a&quot;</span>];</span><br><span class="line"><span class="comment">//举一个简单的例子，返回类型为string的元素</span></span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> <span class="keyword">typeof</span> item === <span class="string">&quot;string&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);<span class="comment">//[ &#x27;March&#x27;, &#x27;Jan&#x27;, &#x27;A&#x27;, &#x27;a&#x27; ]</span></span><br></pre></td></tr></table></figure><h4 id="7-reduce-数据累加"><a href="#7-reduce-数据累加" class="headerlink" title="7.reduce() 数据累加"></a>7.<code>reduce()</code> 数据累加</h4><p>回调函数有四个参数，分别是累计值，当前元素，当前索引，和原数组。</p><p><code>callback</code>: 必需，是一个用于执行每个数组元素的函数，包含四个参数：</p><ul><li><code>accumulator</code>：累积器，累积计算的结果。</li><li><code>currentValue</code>：当前元素的值。</li><li><code>currentIndex</code>：当前元素的索引（可选）。</li><li><code>array</code>：数组对象（可选）。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">//比如求和</span></span><br><span class="line"><span class="keyword">const</span> sum = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers);<span class="comment">// sum 现在为 15</span></span><br></pre></td></tr></table></figure><h4 id="8-slice-数组截取"><a href="#8-slice-数组截取" class="headerlink" title="8.slice() 数组截取"></a>8.<code>slice()</code> 数组截取</h4><p>用于截取数组中的一部分元素，生成一个新的数组，而不影响原始数组，包含了从 <code>start</code> 到 <code>end</code> 范围内的元素，但不包括 <code>end</code> 处的元素。</p><ul><li><code>start</code>：可选，指定截取的起始位置（包含该位置的元素），索引从 0 开始。如果未提供 <code>start</code>，则默认为 0。</li><li><code>end</code>：可选，指定截取的结束位置（不包含该位置的元素）。如果未提供 <code>end</code>，或者 <code>end</code> 大于数组的长度，<code>slice</code> 会截取到数组的末尾。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 截取一部分元素</span></span><br><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;cherry&#x27;</span>, <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;elderberry&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> slicedFruits = fruits.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// slicedFruits 现在为 [&#x27;banana&#x27;, &#x27;cherry&#x27;, &#x27;date&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="9-forEach-数组遍历"><a href="#9-forEach-数组遍历" class="headerlink" title="9.forEach() 数组遍历"></a>9.<code>forEach()</code> 数组遍历</h4><p><code>callback</code>：是一个必需的函数，用于对数组中的每个元素执行操作。它接受三个参数：</p><ul><li><code>currentValue</code>：当前元素的值。</li><li><code>index</code>：当前元素的索引（可选）。</li><li><code>array</code>：原始数组（可选）。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历 numbers 数组中的每个元素，并在控制台上输出每个元素的索引和值。</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">number, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`索引：<span class="subst">$&#123;index&#125;</span> 值：<span class="subst">$&#123;number&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="10-Array-from-转换成数组"><a href="#10-Array-from-转换成数组" class="headerlink" title="10.Array.from() 转换成数组"></a>10.<code>Array.from()</code> 转换成数组</h4><p>用于将类似数组或可迭代对象转换为真正的数组的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> strArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(str);</span><br><span class="line"><span class="comment">// strArray 现在为 [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span></span><br></pre></td></tr></table></figure><h4 id="11-includes"><a href="#11-includes" class="headerlink" title="11.includes()"></a>11.<code>includes()</code></h4><p>用于检查数组中是否包含特定元素，如果包含则返回 <code>true</code>，否则返回 <code>false</code>。</p><p>语法：<code>array.includes(searchElement, fromIndex)</code></p><ul><li><code>searchElement</code>：必需，要查找的元素。</li><li><code>fromIndex</code>：可选，从指定索引位置开始查找。如果省略 <code>fromIndex</code>，则从数组的开头开始查找。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查数组中是否包含元素</span></span><br><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> hasBanana = fruits.<span class="title function_">includes</span>(<span class="string">&quot;banana&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> hasGrapes = fruits.<span class="title function_">includes</span>(<span class="string">&quot;grapes&quot;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从指定索引位置开始检查</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> has3 = numbers.<span class="title function_">includes</span>(<span class="number">3</span>, <span class="number">2</span>); <span class="comment">// true，从索引 2 开始查找，找到了 3</span></span><br><span class="line"><span class="keyword">const</span> has3FromStart = numbers.<span class="title function_">includes</span>(<span class="number">3</span>); <span class="comment">// true，从数组开头开始查找，找到了 3</span></span><br></pre></td></tr></table></figure><h4 id="12-indexOf"><a href="#12-indexOf" class="headerlink" title="12.indexOf()"></a>12.<code>indexOf()</code></h4><p>用于查找数组中特定元素的索引位置。如果找到该元素，<code>indexOf</code> 返回它的索引值；如果没有找到，返回 -1。</p><p>语法：<code>array.indexOf(searchElement, fromIndex)</code></p><ul><li><code>searchElement</code>：必需，要查找的元素。</li><li><code>fromIndex</code>：可选，从指定索引位置开始查找。如果省略 <code>fromIndex</code>，则从数组的开头开始查找。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找元素的索引</span></span><br><span class="line"><span class="keyword">const</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> bananaIndex = fruits.<span class="title function_">indexOf</span>(<span class="string">&quot;banana&quot;</span>); <span class="comment">// 1，&quot;banana&quot; 在索引 1 处</span></span><br><span class="line"><span class="keyword">const</span> grapesIndex = fruits.<span class="title function_">indexOf</span>(<span class="string">&quot;grapes&quot;</span>); <span class="comment">// -1，&quot;grapes&quot; 不存在于数组中</span></span><br><span class="line"><span class="comment">// 从指定索引位置开始查找</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> index1 = numbers.<span class="title function_">indexOf</span>(<span class="number">2</span>); <span class="comment">// 1，第一个 2 的索引</span></span><br><span class="line"><span class="keyword">const</span> index2 = numbers.<span class="title function_">indexOf</span>(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// 3，从索引 2 开始查找，找到第二个 2 的索引</span></span><br></pre></td></tr></table></figure><h4 id="13-find"><a href="#13-find" class="headerlink" title="13.find()"></a>13.<code>find()</code></h4><p>用于查找数组中符合指定条件的第一个元素，并返回该元素</p><p>语法：<code>array.find(callback(element, index, array))</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 查找包含特定字符的字符串</span><br><span class="line">const words = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;date&quot;];</span><br><span class="line">const wordWithA = words.find((word) =&gt; word.includes(&quot;a&quot;)); // &quot;banana&quot;，第一个包含字母 &quot;a&quot; 的字符串</span><br></pre></td></tr></table></figure><h4 id="14-every"><a href="#14-every" class="headerlink" title="14.every()"></a>14.<code>every()</code></h4><p>用于检查数组中的所有元素是否满足指定的条件。</p><p>语法：<code>array.every(callback(element, index, array))</code></p><p><code>callback</code>：必需，一个函数，用于定义检查条件的规则。它接受三个参数：</p><ul><li><code>element</code>：当前数组元素的值。</li><li><code>index</code>：当前元素的索引（可选）。</li><li><code>array</code>：原始数组（可选）。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查数组中的所有字符串是否包含字母 &quot;a&quot;</span></span><br><span class="line"><span class="keyword">const</span> words = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>, <span class="string">&quot;date&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> hasAInAll = words.<span class="title function_">every</span>(<span class="function">(<span class="params">word</span>) =&gt;</span> word.<span class="title function_">includes</span>(<span class="string">&quot;a&quot;</span>)); <span class="comment">// false，&quot;cherry&quot; 不包含 &quot;a&quot;</span></span><br></pre></td></tr></table></figure><h4 id="15-some"><a href="#15-some" class="headerlink" title="15.some()"></a>15.<code>some()</code></h4><p>用于检查数组中是否存在满足指定条件的元素。</p><p>语法：<code>array.some(callback(element, index, array))</code></p><p><code>callback</code>：必需，一个函数，用于定义检查条件的规则。它接受三个参数：</p><ul><li><code>element</code>：当前数组元素的值。</li><li><code>index</code>：当前元素的索引（可选）。</li><li><code>array</code>：原始数组（可选）。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查数组中是否存在元素大于 5</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> hasGreaterThan5 = numbers.<span class="title function_">some</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> element &gt; <span class="number">5</span>); <span class="comment">// true，至少有一个元素大于 5</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录js中常用的数组方法</summary>
    
    
    
    <category term="学习笔记" scheme="http://cctvboy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://cctvboy.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>快速搭建博客</title>
    <link href="http://cctvboy.github.io/posts/f89a.html"/>
    <id>http://cctvboy.github.io/posts/f89a.html</id>
    <published>2023-09-22T15:27:07.000Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<p>运行命令hexo clean（清除生成文件），hexo g（生成网页）， hexo s（本地预览），hexo d（部署）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;运行命令hexo clean（清除生成文件），hexo g（生成网页）， hexo s（本地预览），hexo d（部署）&lt;/p&gt;
</summary>
      
    
    
    
    <category term="博客搭建" scheme="http://cctvboy.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="博客" scheme="http://cctvboy.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>git命令操作</title>
    <link href="http://cctvboy.github.io/posts/f8ce.html"/>
    <id>http://cctvboy.github.io/posts/f8ce.html</id>
    <published>2023-09-21T16:51:17.000Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git常用命令一图流"><a href="#git常用命令一图流" class="headerlink" title="git常用命令一图流"></a>git常用命令一图流</h2><p><img src="https://cdn.statically.io/gh/cctvboy/pic-bed@master/20231026/git.27nokd5kzytc.webp" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">git init                                                  # 初始化本地git仓库（创建新仓库）</span><br><span class="line">git config --global user.name &quot;xxx&quot;                       # 配置用户名</span><br><span class="line">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</span><br><span class="line">git config --global color.ui true                         # git status等命令自动着色</span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --unset http.proxy                    # remove  proxy configuration on git</span><br><span class="line">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库</span><br><span class="line">git status                                                # 查看当前版本状态（是否修改）</span><br><span class="line">git add xyz                                               # 添加xyz文件至index</span><br><span class="line">git add .                                                 # 增加当前子目录下所有更改过的文件至index</span><br><span class="line">git commit -m &#x27;xxx&#x27;                                       # 提交</span><br><span class="line">git commit --amend -m &#x27;xxx&#x27;                               # 合并上一次提交（用于反复修改）</span><br><span class="line">git commit -am &#x27;xxx&#x27;                                      # 将add和commit合为一步</span><br><span class="line">git rm xxx                                                # 删除index中的文件</span><br><span class="line">git rm -r *                                               # 递归删除</span><br><span class="line">git log                                                   # 显示提交日志</span><br><span class="line">git log -1                                                # 显示1行日志 -n为n行</span><br><span class="line">git log -5</span><br><span class="line">git log --stat                                            # 显示提交日志及相关变动文件</span><br><span class="line">git log -p -m</span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</span><br><span class="line">git show dfb02                                            # 可只用commitid的前几位</span><br><span class="line">git show HEAD                                             # 显示HEAD提交日志</span><br><span class="line">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span><br><span class="line">git push origin master                                    # 将当前分支push到远程master分支</span><br><span class="line">git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支</span><br><span class="line">git push --tags                                           # 把所有tag推送到远程仓库</span><br><span class="line">git pull origin master                                    # 获取远程分支master并merge到当前分支</span><br><span class="line">git mv README README2                                     # 重命名文件README为README2</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录经常使用的一些git命令</summary>
    
    
    
    <category term="学习笔记" scheme="http://cctvboy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://cctvboy.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>实用网站收录</title>
    <link href="http://cctvboy.github.io/posts/f8ce.html"/>
    <id>http://cctvboy.github.io/posts/f8ce.html</id>
    <published>2023-09-21T16:51:17.000Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<p>在线生成favicon图标：<a href="https://www.pintuer.com/tools/favicon/">https://www.pintuer.com/tools/favicon/</a><br>渐变色网址：<a href="https://webgradients.com/">https://webgradients.com/</a><br>                       <a href="https://www.eggradients.com/">https://www.eggradients.com/</a></p>]]></content>
    
    
    <summary type="html">收集在日常工作中找到的好用且免费的网址、工具</summary>
    
    
    
    
    <category term="工具" scheme="http://cctvboy.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>vue3学习笔记</title>
    <link href="http://cctvboy.github.io/posts/9dcf.html"/>
    <id>http://cctvboy.github.io/posts/9dcf.html</id>
    <published>2023-09-21T16:51:09.000Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建一个vue3项目"><a href="#创建一个vue3项目" class="headerlink" title="创建一个vue3项目"></a>创建一个<code>vue3</code>项目</h3><p>前提条件：必须安装16.0及以上版本的<code>node.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建项目</span></span><br><span class="line">npm create vue@latest</span><br></pre></td></tr></table></figure><p>根据需要选择安装功能，通过方向键进行选择；</p><p><img src="https://cdn.statically.io/gh/cctvboy/pic-bed@master/20230927/vue3.4puxd2gpu960.webp" alt=""></p><p>创建完成后，安装依赖就可以启动项目了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">//启动项目</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>如下图所示启动成功：</p><p><img src="https://cdn.statically.io/gh/cctvboy/pic-bed@master/20230927/cgg.46lg0f4qrsm0.webp" alt=""></p><h3 id="有关setup？"><a href="#有关setup？" class="headerlink" title="有关setup？"></a>有关setup？</h3><ol><li><p><code>setup</code>选项的执行时机?</p><p><code>beforeCreate</code>钩子之前 自动执行</p></li><li><p><code>setup</code>写代码的特点是什么?</p><p>定义数据 +函数 ，然后以对象方式return</p></li><li><p><code>&lt;script setup&gt;</code>解决了什么问题?</p><p>经过语法糖的封装更简单的使用组合式<code>API</code></p></li><li><p><code>setup</code>中的this还指向组件实例吗?</p><p>指向undefined</p></li></ol><h3 id="声明响应式状态"><a href="#声明响应式状态" class="headerlink" title="声明响应式状态"></a>声明响应式状态</h3><p><strong>ref()</strong>：定义一个响应式的数据，包括基本类型、深层嵌套的对象、数组或者 JavaScript 内置的数据结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">//导入ref包</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">//语法格式</span><br><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">function increment() &#123;</span><br><span class="line"> // 在 JavaScript 中使用时需要 .value</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">//复杂一点的声明和使用 </span><br><span class="line">const obj = ref(&#123;</span><br><span class="line">  nested: &#123; count: 0 &#125;,</span><br><span class="line">  arr: [&#x27;foo&#x27;, &#x27;bar&#x27;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function mutateDeeply() &#123;</span><br><span class="line">  // 以下都会按照期望工作</span><br><span class="line">  obj.value.nested.count++</span><br><span class="line">  obj.value.arr.push(&#x27;baz&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;</span><br><span class="line">    &lt;-- 在模板中使用不需要.value --&gt;</span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>reactive()</strong>:定义一个对象类型的响应式数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">//语法格式</span><br><span class="line">const state = reactive(&#123; count: 0 &#125;)</span><br></pre></td></tr></table></figure><h3 id="组件间通信："><a href="#组件间通信：" class="headerlink" title="组件间通信："></a>组件间通信：</h3><p><strong>父传子：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import comSon from &#x27;@/components/son.vue&#x27;</span><br><span class="line">import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const msg = ref(100)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;comSon message=&quot;hello&quot; :msg=&quot;msg&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">//子组件son.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">    massage: String,</span><br><span class="line">    msg: Number</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &#123;&#123;massage&#125;&#125;+&#123;&#123;msg&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>子传父：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import comSon from &#x27;@/components/son.vue&#x27;</span><br><span class="line">const getMsg=(msg)=&gt;&#123;</span><br><span class="line">    console.log(msg)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;comSon @getMsg=&quot;getMsg&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">//子组件son.vue</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const emit = defineEmits([getMsg])</span><br><span class="line">const sendMsg =()=&gt;&#123;</span><br><span class="line">    emit(&#x27;getMsg&#x27;,&#x27;子组件的信息&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;button @click=&quot;sendMsg&quot;&gt;</span><br><span class="line">            send</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>父传子<br>1.父传子的过程中通过什么方式接收props?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defineProps(&#123;属性名: 类型])</span><br></pre></td></tr></table></figure><p>2.setup语法糖中如何使用父组件传过来的数据?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const props = defineProps([ 属性名: 类型&#125;)props.xxx</span><br></pre></td></tr></table></figure><p>子传父<br>1.子传父的过程中通过什么方式得到emit方法?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defineEmits([事件名称])</span><br></pre></td></tr></table></figure><p>2.怎么触发事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emit(&#x27;自定义事件名&#x27;,参数)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">记录学习vue3的知识点</summary>
    
    
    
    <category term="学习笔记" scheme="http://cctvboy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="http://cctvboy.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>壁纸网站合集</title>
    <link href="http://cctvboy.github.io/posts/5475.html"/>
    <id>http://cctvboy.github.io/posts/5475.html</id>
    <published>2023-09-21T14:58:05.000Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<p>一张好的壁纸能给我们带来一个愉悦的心情，所以本文给大家分享一下我收集到的比较好看的一些网站，给大家自行取用，本文本只做分享如有侵权联系作者删除！</p><hr><h4 id="1-极简壁纸：https-bz-zzzmh-cn"><a href="#1-极简壁纸：https-bz-zzzmh-cn" class="headerlink" title="1.极简壁纸：https://bz.zzzmh.cn"></a>1.极简壁纸：<a href="https://bz.zzzmh.cn">https://bz.zzzmh.cn</a></h4><p><img src="https://cdn.statically.io/gh/cctvboy/pic-bed@master/jijian.76aka5tqqz80.webp" alt=""></p><h4 id="2-HD-4K-5K-Resolution-Wallpapers-Backgrounds-▪-Wallroom-io：https-wallroom-io"><a href="#2-HD-4K-5K-Resolution-Wallpapers-Backgrounds-▪-Wallroom-io：https-wallroom-io" class="headerlink" title="2.HD/4K/5K Resolution Wallpapers/Backgrounds ▪ Wallroom.io：https://wallroom.io/"></a>2.HD/4K/5K Resolution Wallpapers/Backgrounds ▪ Wallroom.io：<a href="https://wallroom.io/">https://wallroom.io/</a></h4><p><img src="https://cdn.statically.io/gh/cctvboy/pic-bed@master/Wallpapers.10nfmx4px5hs.webp" alt=""></p><h4 id="3-必应每日高清壁纸-精彩，从这里开始-：https-bing-ioliu-cn"><a href="#3-必应每日高清壁纸-精彩，从这里开始-：https-bing-ioliu-cn" class="headerlink" title="3.必应每日高清壁纸 - 精彩，从这里开始 ：https://bing.ioliu.cn/"></a>3.必应每日高清壁纸 - 精彩，从这里开始 ：<a href="https://bing.ioliu.cn/">https://bing.ioliu.cn/</a></h4><p><img src="https://cdn.statically.io/gh/cctvboy/pic-bed@master/bing.1ausxeie9n28.webp" alt=""></p><h4 id="4-随机壁纸api，每天随机获取壁纸，希望大家能喜欢！"><a href="#4-随机壁纸api，每天随机获取壁纸，希望大家能喜欢！" class="headerlink" title="4.随机壁纸api，每天随机获取壁纸，希望大家能喜欢！"></a>4.随机壁纸api，每天随机获取壁纸，希望大家能喜欢！</h4><p><a href="https://tuapi.eees.cc/api.php?category=dongman">https://tuapi.eees.cc/api.php?category=dongman</a><br><a href="https://api.yimian.xyz/img?type=moe&amp;size=1920x1080">https://api.yimian.xyz/img?type=moe&amp;size=1920x1080</a><br><a href="https://www.loliapi.com/acg/">https://www.loliapi.com/acg/</a></p>]]></content>
    
    
    <summary type="html">分享各类好看的壁纸网站</summary>
    
    
    
    <category term="壁纸分享" scheme="http://cctvboy.github.io/categories/%E5%A3%81%E7%BA%B8%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="壁纸" scheme="http://cctvboy.github.io/tags/%E5%A3%81%E7%BA%B8/"/>
    
  </entry>
  
  <entry>
    <title>前端导出PDF记录~</title>
    <link href="http://cctvboy.github.io/posts/f2ce.html"/>
    <id>http://cctvboy.github.io/posts/f2ce.html</id>
    <published>2022-09-21T17:09:47.000Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前端开发中，有时我们需要将页面内容导出为PDF文件。这可以通过一些JavaScript库来实现，如<code>html2canvas</code>和<code>jsPDF</code>。本文将介绍如何使用这两个库来实现前端页面导出PDF的功能。在查找资料时网上的文章都提到这种方案存在一些缺点，如清晰度问题、分页文字被截断问题、背景黑色，所以在使用时根据需要去选择合适的方案。使用下来个人感觉这种方案基本能满足大部分的使用场景，如果你有幸读到这篇文章，希望能对你有所帮助！</p><h3 id="1-首先，引入或安装html2canvas和jsPDF。"><a href="#1-首先，引入或安装html2canvas和jsPDF。" class="headerlink" title="1.首先，引入或安装html2canvas和jsPDF。"></a>1.首先，引入或安装<code>html2canvas</code>和<code>jsPDF</code>。</h3><p>官网地址：</p><p><a href="https://github.com/niklasvh/html2canvas/releases">https://github.com/niklasvh/html2canvas/releases</a><br><a href="https://github.com/parallax/jsPDF">https://github.com/parallax/jsPDF</a></p><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2.基本使用"></a>2.基本使用</h3><p>因为我维护的项目是老项目，所以在使用上直接操作dom，不过使用的思路都是依葫芦画瓢的。在处理分页问题上，我使用自定义高度的方式，直接把所有内容打印在一页上，但是这种适合打印的内容相对较少，如果你的项目需求是需要分页，可以把格式改为使用A4的格式，但是随之而来的坑太多，使用起来很繁琐。那本文也许不适合您，请移步去找其他的解决方法，不浪费您的宝贵时间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用html2canvas和jspdf实现打印为PDF</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;savePdfButton&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line"><span class="comment">//打印时隐藏打印按钮</span></span><br><span class="line">$(<span class="string">&quot;#savePdfButton&quot;</span>).<span class="title function_">hide</span>()</span><br><span class="line"><span class="comment">//将文档的滚动位置重置为页面顶部，确保捕获整个页面内容。</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 生成canvas上下文</span></span><br><span class="line">    <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line">    <span class="comment">//获取需要导出的dom元素</span></span><br><span class="line">    <span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;report_box&#x27;</span>)</span><br><span class="line">    <span class="comment">//获取需要导出pdf区域的宽度和高度</span></span><br><span class="line">    <span class="keyword">var</span> w = element.<span class="property">offsetWidth</span> <span class="comment">// 获得该容器的宽</span></span><br><span class="line">    <span class="keyword">var</span> h = element.<span class="property">offsetHeight</span> <span class="comment">// 获得该容器的高</span></span><br><span class="line">    <span class="comment">//将画布宽&amp;&amp;高放大三倍，提高清晰度</span></span><br><span class="line">    <span class="keyword">let</span> scale = <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> (w &gt; h) &#123;</span><br><span class="line">    h = w</span><br><span class="line">    &#125;</span><br><span class="line">    canvas.<span class="property">width</span> = w * scale</span><br><span class="line">    canvas.<span class="property">height</span> = h * scale</span><br><span class="line">    context.<span class="title function_">scale</span>(scale, scale)</span><br><span class="line">    <span class="keyword">let</span> opts = &#123;</span><br><span class="line">        <span class="attr">scale</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">width</span>: w,</span><br><span class="line">        <span class="attr">height</span>: h,</span><br><span class="line">        <span class="attr">useCORS</span>: <span class="literal">true</span>,  <span class="comment">//允许canvas画布内可以跨域请求外部链接图片, 允许跨域请求。</span></span><br><span class="line">        <span class="comment">//设置背景颜色，避免出现黑色背景</span></span><br><span class="line">        <span class="attr">background</span>: <span class="string">&quot;#69B0AC&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 动态调整元素大小以填满整个PDF页面，不然在打印时会出现黑色背景</span></span><br><span class="line">    element.<span class="property">style</span>.<span class="property">width</span> = w + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    element.<span class="property">style</span>.<span class="property">height</span> = h + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">html2canvas</span>(element, opts).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">canvas</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> contentWidth = canvas.<span class="property">width</span> / scale</span><br><span class="line">    <span class="keyword">let</span> contentHeight = canvas.<span class="property">height</span> / scale</span><br><span class="line">    <span class="comment">//自定义宽高</span></span><br><span class="line">    <span class="keyword">let</span> pdf = <span class="keyword">new</span> <span class="title function_">jsPDF</span>(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;mm&#x27;</span>, [contentWidth, contentHeight])</span><br><span class="line">    <span class="comment">//转换图片为dataURL</span></span><br><span class="line">    <span class="keyword">let</span> pageData = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/jpeg&#x27;</span>, <span class="number">1.0</span>)</span><br><span class="line">    <span class="comment">//pdf.fillStyle = &quot;#69B0AC&quot;;</span></span><br><span class="line">    <span class="comment">//添加图像到页面</span></span><br><span class="line">    <span class="comment">// addImage(pageData, &#x27;JPEG&#x27;, 左，上，宽度，高度)</span></span><br><span class="line">    pdf.<span class="title function_">addImage</span>(pageData, <span class="string">&#x27;JPEG&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, contentWidth, contentHeight)</span><br><span class="line">    <span class="comment">// 还原元素的原始大小</span></span><br><span class="line">    element.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;auto&#x27;</span>;</span><br><span class="line">    element.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;auto&#x27;</span>;</span><br><span class="line">    <span class="comment">//保存PDF</span></span><br><span class="line">    pdf.<span class="title function_">save</span>(data.<span class="property">userName</span> + data.<span class="property">scaleName</span> + <span class="string">&#x27;.pdf&#x27;</span>)</span><br><span class="line">    <span class="comment">// 显示按钮</span></span><br><span class="line">    $(<span class="string">&quot;#savePdfButton&quot;</span>).<span class="title function_">show</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);        </span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文知识点较少，刚开始学习写博客，没有什么经验，不好的地方希望能给些建议~</p>]]></content>
    
    
    <summary type="html">主要记录使用浏览器、html2canvas+jspdf的方式来实现</summary>
    
    
    
    <category term="学习笔记" scheme="http://cctvboy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="踩坑记" scheme="http://cctvboy.github.io/tags/%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>前端布局</title>
    <link href="http://cctvboy.github.io/posts/66c7.html"/>
    <id>http://cctvboy.github.io/posts/66c7.html</id>
    <published>2022-09-21T17:09:39.000Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="弹性布局-flex"><a href="#弹性布局-flex" class="headerlink" title="弹性布局(flex)"></a>弹性布局(flex)</h1><p>在平时的工作中，弹性布局已成为了必不可少的布局方案之一，任何元素容器都可以指定为flex布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//开启弹性布局</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line">//在行内元素中使用</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br><span class="line">//Webkit内核的浏览器，加上-webkit前缀进行兼容</span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。默认沿主轴排列。单个flex item占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><p><img src="https://cdn.statically.io/gh/cctvboy/blog-pic-bad@master/20231106/flex.7dv0ha01yq00.webp" alt=""></p><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p>决定主轴的方向(即每个flex item的排列方向)</p><ul><li>row（默认值）：主轴为水平方向，起点在左端。</li><li>row-reverse：主轴为水平方向，起点在右端。</li><li>column：主轴为垂直方向，起点在上沿。</li><li>column-reverse：主轴为垂直方向，起点在下沿。</li></ul><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>决定flex item是否换行</p><ul><li>nowrap(默认)：不换行。</li><li>wrap：换行，第一行在上方。</li><li>wrap-reverse：换行，第一行在下方。</li></ul><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>决定flex item在主轴上的对齐方式。</p><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center： 居中</li><li>space-between：两端对齐，项目之间的间隔都相等。</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p>决定多根轴线的对齐方式。如果item只有一根轴线，该属性不起作用。</p><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul><h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  order: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。</p><ul><li>flex-grow：定义item的放大比例，默认为0，即如果存在剩余空间，也不放大。</li><li>flex-shrink：定义item的缩小比例，默认为1，即如果空间不足，该项目将缩小。</li><li>flex-basis：定义item的在分配多余空间之前，项目占据的主轴空间（main size）。</li></ul><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="网格布局-grid"><a href="#网格布局-grid" class="headerlink" title="网格布局(grid)"></a>网格布局(grid)</h1><p>通过网格布局，可以轻松地将页面划分为行和列，然后将内容放置到这些行和列中，从而实现高度灵活的布局。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.div&#123;</span><br><span class="line">/* grid布局 两端对齐,最后一行左对齐*/</span><br><span class="line">    display: grid | inline-grid;</span><br><span class="line">    grid-template-columns: 1fr 1fr 1fr 1fr;</span><br><span class="line">    gap: 30px;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在元素上声明 <code>display：grid</code> 或 <code>display：inline-grid</code> 来创建一个网格容器。声明 <code>display：grid</code> 则该容器是一个块级元素，设置成 <code>display: inline-grid</code> 则容器元素为行内元素</p><h2 id="grid-template-columns-属性和-grid-template-rows-属性"><a href="#grid-template-columns-属性和-grid-template-rows-属性" class="headerlink" title="grid-template-columns 属性和 grid-template-rows 属性"></a>grid-template-columns 属性和 grid-template-rows 属性</h2><h3 id="grid-template-columns"><a href="#grid-template-columns" class="headerlink" title="grid-template-columns"></a>grid-template-columns</h3><p>定义网格中的列，<strong><code>fr</code> 单位的定义</strong>：<code>fr</code> 表示可用空间的分数。它是相对单位，表示可用空间的一等分之一。如果有多个列或行都使用 <code>fr</code> 单位，它们将按照它们的分数平均分配可用空间。</p><p>假设你有一个网格容器，并定义了两个列，一个使用 <code>1fr</code>，另一个使用 <code>2fr</code>。那么第一个列将获得可用空间的1/3，而第二个列将获得可用空间的2/3。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.grid &#123;</span><br><span class="line">  display: grid;</span><br><span class="line">  grid-template-columns: 1fr 2fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>grid-template-columns: 1fr;独自占一行</p><p><img src="https://cdn.statically.io/gh/cctvboy/blog-pic-bad@master/20231106/image-20231106164536893.3moj0shfqy20.webp" alt=""></p></li><li><p>grid-template-columns: 1fr 1fr;分成两列</p><p><img src="https://cdn.statically.io/gh/cctvboy/blog-pic-bad@master/20231106/grid-template-colu.to5jwndetjk.webp" alt=""></p></li><li><p>grid-template-columns: repeat(4,1fr);</p><p>需要一行展示多个盒子时使用repeat()更加方便，如上一行展示四个盒子</p><p><img src="https://cdn.statically.io/gh/cctvboy/blog-pic-bad@master/20231106/image-20231106164908716.2tbwsv1luc60.webp" alt=""></p></li><li><p>grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); auto-fill主轴上指定的宽度或者重复次数是最大可能的正整数，minmax最小值300px、最大值1fr代表剩余空间的比例。适合响应式布局，使用时要注意父容器不能使用固定宽度，可以将父容器改为如：80%，这样就能根据屏幕的宽度，自动展示一行展示几个了。</p></li></ul><h3 id="grid-template-rows"><a href="#grid-template-rows" class="headerlink" title="grid-template-rows"></a>grid-template-rows</h3><p>在网格容器中设置行的高度，例如：<code>grid-template-rows: 50px 50px;</code> 创建两行，每行的高度分别为50像素。</p><h3 id="grid-gap"><a href="#grid-gap" class="headerlink" title="grid-gap"></a>grid-gap</h3><p>网格间距，是grid-column-gap和grid-row-gap的简写，例如：grid-gap: 20px 10px; 水平间距为20像素，垂直间距为10像素 </p><h3 id="grid-row和grid-column可以控制某个元素占领几份"><a href="#grid-row和grid-column可以控制某个元素占领几份" class="headerlink" title="grid-row和grid-column可以控制某个元素占领几份"></a>grid-row和grid-column可以控制某个元素占领几份</h3><p>从第几列开始 / 第几列+想占几个；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line"> grid-row: 1/3;</span><br><span class="line">    grid-column: 1/3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>弹性布局和网格布局都有各自的优缺点，它们相互补充，根据具体的布局需求选择合适的布局模型。弹性布局适用于简单的一维布局和对齐需求，而网格布局适用于更复杂的多维度布局和对齐控制。在实际项目中，可以根据需求选择使用它们的组合，以实现所需的网页布局。</p>]]></content>
    
    
    <summary type="html">弹性布局和grid布局</summary>
    
    
    
    <category term="学习笔记" scheme="http://cctvboy.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="css" scheme="http://cctvboy.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>测试文章六</title>
    <link href="http://cctvboy.github.io/posts/d04e.html"/>
    <id>http://cctvboy.github.io/posts/d04e.html</id>
    <published>2021-09-21T17:09:57.000Z</published>
    <updated>2023-11-10T09:01:58.647Z</updated>
    
    
    <summary type="html">测试测试</summary>
    
    
    
    
  </entry>
  
</feed>
